generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ActionType {
  LIKE
  COMMENT
  KUDOS
}

model User {
  userId        String              @id @default(cuid())
  displayName   String
  firstName     String?
  lastName      String?
  email         String              @unique
  password      String
  role          Role?               @default(USER)
  companyId     String
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifications UserNotifications[]
  settings      UserSettings[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  sentKudos     Kudos[]             @relation(name: "SentKudos")
  receivedKudos Kudos[]             @relation(name: "ReceivedKudos")
  userLikes     User_Like[]
  refreshTokens RefreshToken[]
  comments      Comment[]
  commentLikes  Comment_Like[]
}

model Company {
  id          String    @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  companyCode String    @unique
  users       User[]
  kudos       Kudos[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Kudos {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String
  companyId   String
  message     String
  title       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  likes       Int         @default(0)
  isAnonymous Boolean     @default(false)
  isHidden    Boolean     @default(false)
  comments    Comment[]
  sender      User        @relation(fields: [senderId], references: [userId], name: "SentKudos")
  receiver    User        @relation(fields: [receiverId], references: [userId], name: "ReceivedKudos")
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userLikes   User_Like[]
}

model Comment {
  id            String         @id @default(cuid())
  kudosId       String
  parentId      String?
  userId        String
  likes         Int            @default(0)
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  kudos         Kudos          @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parentComment Comment?       @relation("CommentToComment", fields: [parentId], references: [id])
  comments      Comment[]      @relation("CommentToComment")
  commentLikes  Comment_Like[]
}

model User_Like {
  userId  String
  kudosId String
  likedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  kudos   Kudos    @relation(fields: [kudosId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, kudosId])
}

model Comment_Like {
  likedAt   DateTime @default(now())
  userId    String
  commentId String

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, commentId])
}

model UserNotifications {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [userId])
  actionType  ActionType
  referenceId String
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
}

model UserSettings {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [userId])
  settings  Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
